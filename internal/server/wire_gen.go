// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package server

import (
	"mcm-api/internal/core"
	"mcm-api/pkg/article"
	"mcm-api/pkg/authz"
	"mcm-api/pkg/comment"
	"mcm-api/pkg/contributesession"
	"mcm-api/pkg/contribution"
	"mcm-api/pkg/faculty"
	"mcm-api/pkg/media"
	"mcm-api/pkg/queue"
	"mcm-api/pkg/startup"
	"mcm-api/pkg/user"
)

// Injectors from injector.go:

func InitializeServer() *Server {
	config := core.ProvideConfig()
	db := core.ProvideDB(config)
	repository := user.InitializeRepository(db)
	service := user.InitializeService(config, repository)
	startupService := startup.InitializeStartUpService(service)
	authzService := authz.InitializeAuthService(config, service)
	handler := authz.NewAuthHandler(authzService)
	userHandler := user.NewUserHandler(config, service)
	facultyRepository := faculty.InitializeRepository(db)
	facultyService := faculty.InitializeService(config, facultyRepository)
	facultyHandler := faculty.NewHandler(config, facultyService)
	imageProxyService := media.NewDarthsimImageProxyService(config)
	mediaService := media.NewStorageService(config, imageProxyService)
	mediaHandler := media.NewHandler(config, mediaService)
	contributesessionRepository := contributesession.InitializeRepository(db)
	contributesessionService := contributesession.InitializeService(config, contributesessionRepository)
	contributesessionHandler := contributesession.NewHandler(config, contributesessionService)
	contributionRepository := contribution.InitializeRepository(db)
	client := core.ProvideRedis(config)
	queueQueue := queue.InitializeRedisQueue(config, client)
	articleRepository := article.InitializeRepository(db)
	articleService := article.InitializeService(config, articleRepository, mediaService, queueQueue)
	contributionService := contribution.InitializeService(config, contributionRepository, queueQueue, contributesessionService, articleService, mediaService)
	contributionHandler := contribution.NewHandler(config, contributionService)
	articleHandler := article.NewHandler(config, articleService)
	commentRepository := comment.InitializeRepository(db)
	commentService := comment.InitializeService(config, commentRepository)
	commentHandler := comment.NewHandler(config, commentService)
	server := newServer(config, startupService, handler, userHandler, facultyHandler, mediaHandler, contributesessionHandler, contributionHandler, articleHandler, commentHandler)
	return server
}
