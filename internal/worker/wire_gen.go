// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package worker

import (
	"mcm-api/internal/core"
	"mcm-api/pkg/article"
	"mcm-api/pkg/contributesession"
	"mcm-api/pkg/contribution"
	"mcm-api/pkg/converter"
	"mcm-api/pkg/faculty"
	"mcm-api/pkg/media"
	"mcm-api/pkg/notification"
	"mcm-api/pkg/queue"
	"mcm-api/pkg/user"
)

// Injectors from injector.go:

func InitializeWorker() *worker {
	config := core.ProvideConfig()
	client := core.ProvideRedis(config)
	queueQueue := queue.InitializeRedisQueue(config, client)
	imageProxyService := media.NewDarthsimImageProxyService(config)
	service := media.NewStorageService(config, imageProxyService)
	documentConverter := converter.NewGotenbergDocumentConverter(config, service)
	db := core.ProvideDB(config)
	repository := article.InitializeRepository(db)
	articleService := article.InitializeService(config, repository, service, queueQueue)
	notificationService := notification.InitializeService(config)
	userRepository := user.InitializeRepository(db)
	facultyRepository := faculty.InitializeRepository(db)
	facultyService := faculty.InitializeService(config, facultyRepository)
	userService := user.InitializeService(config, userRepository, facultyService)
	contributionRepository := contribution.InitializeRepository(db)
	contributesessionRepository := contributesession.InitializeRepository(db)
	contributesessionService := contributesession.InitializeService(config, contributesessionRepository, queueQueue, service)
	contributionService := contribution.InitializeService(config, contributionRepository, queueQueue, contributesessionService, articleService, service)
	redsync := core.ProvideLock(client)
	workerWorker := newWorker(config, queueQueue, documentConverter, articleService, notificationService, userService, service, contributionService, contributesessionService, redsync)
	return workerWorker
}
